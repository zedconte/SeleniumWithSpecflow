# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'vs2017-win2016'

  # do this before all your .NET Core tasks
steps:
- task: DotNetCoreInstaller@0
  displayName: Install .NET Core SDK 2.1.503
  inputs:
    packageType: sdk
    version: 2.1.503
  condition: and(succeeded(), ne(variables['Hosted'], 'true')) # Hosted agents already have this.

- script: dotnet --info
  displayName: Show dotnet SDK info

- task: NuGetToolInstaller@0
  displayName: Pin nuget.exe version
  inputs:
    versionSpec: 4.6.1

- powershell: nuget restore SpecflowParallelTest.sln
  displayName: Nuget restore packages

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: 'SpecflowParallelTest/*.csproj'


# do this after other tasks such as building
- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: 'SpecflowParallelTest/*.csproj'
    arguments: '--configuration $(buildConfiguration)'
    testAssemblyVer2: '**\$(BuildConfiguration)\**\Web.Tests.dll'

    uiTests: true

# do this after other tasks such as building
- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

# do this near the end of your pipeline in most cases
- task: PublishBuildArtifacts@1

# do this after your tests have run
- script: dotnet test --logger trx;logfilename=results.xml
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: 'SpecflowParallelTest/TestResults/*.xml'
